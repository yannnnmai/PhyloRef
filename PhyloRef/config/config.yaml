# =============================================================================
# config/config.yaml — Detailed Documentation
# =============================================================================
# This file centrally manages all parameters used in the Snakemake workflow.
# Each parameter is accompanied by explanatory comments in English (originally Chinese),
# describing its purpose, valid options, and typical usage examples.
# 
# You can customize the entire pipeline by modifying this file,
# without the need to directly edit the Snakefile.
# -----------------------------------------------------------------------------
# 1) Basic YAML Syntax Guidelines:
#   - YAML uses a key: value structure; a space is required after the colon.
#   - Strings should be enclosed in quotes (" ").
#   - Boolean values must be written in lowercase (true/false).
#   - Lists can be written in two styles: inline with brackets, or multiline with indentation.
#     This file uses the recommended multiline style for readability.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
#  User Credentials for NCBI Download Authentication
# -----------------------------------------------------------------------------
email: "YOUR_EMAIL"     # Required: Contact email as mandated by NCBI.
api_key: "YOUR_NCBI_API_KEY"  # Optional but recommended: NCBI API key to increase download rate.

# -----------------------------------------------------------------------------
#  Global Directory Paths
# -----------------------------------------------------------------------------
results_dir:   "results"     # Default output directory for all workflow-generated files.
logs_dir:      "logs"        # Directory for logs generated by individual Snakemake rules.
resources_dir: "resources"   # Directory for static input files, such as accession/species lists or similar.txt.

# =============================================================================
# STEP-1  Download Sequences (download)
# =============================================================================
# Description:
# Download GenBank (.gb) files based on either accession numbers or species names.
#
# mode      : Select download mode ⇒ "accession" or "species_name".
# <list>    : Path to the corresponding input file (TXT format, one entry per line).
# scripts   : Mapping of download modes to their respective Python scripts.
#             You can modify the paths here to use custom scripts if needed.
# ----------------------------------------------------------------------------
download:
  mode: "accession"        # [accession | species_name]
  accession_list: "resources/accession.txt"
  species_list:   "resources/species_name.txt"
  scripts:
    accession:    "workflow/scripts/download_accession.py"
    species_name: "workflow/scripts/download_name.py"

# =============================================================================
# STEP-2  Sequence Filtering (filter)
# =============================================================================
# Two filtering modes are supported:
#   - gene      : Retain sequences containing a specific gene that meet a minimum length.
#   - complete  : Retain only records labeled as "complete mitochondrial genome".

# If "gene" mode is selected:
#   - Specify the target gene in the `gene` field (e.g., "12S").
#   - Set a minimum acceptable sequence length with `minlen`.
#   This mode is recommended for extracting specific gene regions
#   for downstream alignment and phylogenetic analysis.

# If "complete" mode is selected:
#   - `gene` and `minlen` will be ignored and can be left blank.

# Boolean flags to control whether to retain records with ambiguous or non-standard taxon labels:
#   - keep_cf:         Retain entries labeled with "cf." (e.g., "Cyprinus cf. carpio")
#   - keep_sp:         Retain entries labeled with "sp." (e.g., "Cyprinus sp.", species undetermined)
#   - keep_subspecies: Retain subspecies entries (e.g., "Cyprinus carpio haematopterus")
#   - keep_hybrid:     Retain hybrid entries (identified by "_x_" in file names)

# To enable: set the value to true (lowercase)
# To disable: set the value to false (default)
# Example: keep_cf: true will retain all "cf." entries
# ----------------------------------------------------------------------------
filter:
  mode: "gene"                # [gene | complete] — Filtering mode: by gene or by completeness.
  gene: "12S"                 # Effective only when mode == "gene"; specify the target gene name or regex fragment. 
                             # Example: ["12S", "16S", "ND1", "ND2", "COX1", "COX2", "ATP8", "ATP6", "COX3", "ND3", "ND4L", "ND4", "ND5", "ND6", "CYTB"]
  minlen: 400                 # Retain sequences with length >= minlen (only in "gene" mode).
  max_sequences: 5            # Maximum number of sequences to retain per species.
  keep_cf: false              # Whether to keep entries labeled with "cf." (e.g., "Cyprinus cf. carpio").
  keep_sp: false              # Whether to keep entries labeled with "sp." (species undetermined).
  keep_subspecies: false      # Whether to keep subspecies entries.
  keep_hybrid: false          # Whether to keep hybrid entries (identified by "_x_" in file names).

# =============================================================================
# STEP-3  Gene Extraction (extract)
# =============================================================================
# If the list is empty → extract all CDS/genes from each GenBank file.
# If one or more genes are specified → extract only those target genes.
#
# Supports multi-gene extraction across species (recommended when filter.mode is "complete").
#
# Suggested usage alignment with STEP-2:
#   - If filter.mode is "gene" and a specific gene is set (e.g., "12S"),
#     it is recommended to specify the same gene here for consistency.
#   - If filter.mode is "complete", multiple genes can be listed here
#     (e.g., ["12S", "16S"]) to extract from complete mitochondrial genomes.
# ----------------------------------------------------------------------------
extract:
  genes: ["12S"]                 # Example: ["12S", "16S", "ND1", "ND2",
                                #          "COX1", "COX2", "ATP8", "ATP6",
                                #          "COX3", "ND3", "ND4L", "ND4",
                                #          "ND5", "ND6", "CYTB"]

# =============================================================================
# STEP-4  Grouping by Taxonomic Order (grouping)
# =============================================================================
# Split the Concat.fa file into multiple FASTA files based on taxonomic "Order".
# Optionally, specify outgroup sequence IDs to include in all groups for tree rooting.
#
# max_per_file controls the maximum number of sequences per output file.
# If exceeded, the group will be automatically split into _part1, _part2, etc.
# ----------------------------------------------------------------------------
grouping:
  max_per_file: 2000          # Recommended range: 1000–5000. 
                              # Larger values may lead to timeouts during tree inference.
  outgroup_ids:               # List of additional outgroup sequence IDs to include in each group.
    - "NC_023455"
    - "NC_035057"

# =============================================================================
# STEP-5  Phylogenetic Tree Construction (tree)
# =============================================================================
# Specify absolute paths or command names (if available in $PATH) for MAFFT and FastTree.
#
# threads: Number of CPU threads to use for MAFFT (FastTree runs in single-threaded -nt mode).
# ----------------------------------------------------------------------------
tree:
  threads: 30                  # Number of CPU threads for MAFFT.
                              # For multi-threading, run Snakemake with the "--cores" option.
  mafft: "/usr/bin/mafft"     # Path to the MAFFT executable; use "mafft" if it is in $PATH.
  fasttree: "/home/room/users/zhoutao/conda/envs/python27/phyloref_env/bin/FastTree"  # Path to the FastTree executable.

# =============================================================================
# STEP-6  Phylogenetic Anomaly Detection (detect_anomaly)
# =============================================================================
# Specify outgroup sequence IDs for tree rooting during anomaly detection.
# These will be passed to the `detect_anomaly.py` script via the `-og` argument.
# ----------------------------------------------------------------------------
outgroups:
  - "NC_023455"
  - "NC_035057"

# =============================================================================
# STEP-7  Database Cleaning Based on Anomaly Detection (clean_by_anomaly)
# =============================================================================
# similar_files: A list of files containing similar sequences that have been manually reviewed.
#                These files are used to annotate or remove sequences during final cleanup.
#                Multiple files can be provided if necessary.
# ----------------------------------------------------------------------------
similar_files:
  - "resources/similar.txt"
  
# ============================  END OF FILE  ==================================
